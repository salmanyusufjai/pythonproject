from google.cloud import bigquery

# Initialize BigQuery client
client = bigquery.Client()

# Define tables with field mappings, CRN field names, and partition filtering
tables = {
    'table1': {
        'fields': {
            'a1': 'alias_a1',
            'b1': 'alias_b1',
            'c1': 'alias_c1'
        },
        'crn_field': 'company',  # The CRN field for this table
        'date_field': 'createddate',
        'partition_field': '_PARTITIONTIME',
        'partition_filter': "TIMESTAMP('2024-01-01') <= _PARTITIONTIME"  # Example filter
    },
    'table2': {
        'fields': {
            'd1': 'alias_d1',
            'e3': 'alias_e3',
            'z1': 'alias_z1'
        },
        'crn_field': 'businessid',  # The CRN field for this table
        'date_field': 'createddate',
        'partition_field': '_PARTITIONTIME',
        'partition_filter': "TIMESTAMP('2024-01-01') <= _PARTITIONTIME"  # Example filter
    },
    # Add more tables here if needed
}

# Helper function to generate the SELECT clause dynamically
def generate_select_clause(table_name, field_dict, prefix=""):
    """Generate SELECT clause, optionally adding a prefix to the alias."""
    return ", ".join([f"{col} AS {prefix}{alias}" for col, alias in field_dict.items()])

# Start building the query
with_clauses = []
join_clauses = []
select_clauses = ["main_table.*"]

# Loop through the tables and generate the WITH and JOIN clauses for main CRN, UHC CRN, and IHC CRN
for table_name, config in tables.items():
    # Generate the select clause for the table (main CRN)
    select_clause_main = generate_select_clause(table_name, config['fields'])
    
    # Generate the WITH clause for filtering by latest date and partition time for main CRN
    with_clause_main = f"""
    {table_name}_filtered AS (
        SELECT
            {select_clause_main}, {config['crn_field']} AS CRN,  -- Alias the CRN field to 'CRN' for consistent joins
            PARSE_DATE('%d/%m/%Y', {config['date_field']}) AS created_date,
            ROW_NUMBER() OVER (PARTITION BY {config['crn_field']} ORDER BY PARSE_DATE('%d/%m/%Y', {config['date_field']}) DESC) AS row_num
        FROM `project.dataset.{table_name}`
        WHERE {config['partition_filter']}  -- Apply partition filter
    )
    """
    
    # Generate the join clause for main CRN
    join_clause_main = f"""
    LEFT JOIN (
        SELECT * FROM {table_name}_filtered WHERE row_num = 1
    ) AS {table_name}
    ON main_table.CRN = {table_name}.CRN
    """
    
    # Generate the select clause for UHC CRN (with UHC_ prefix)
    select_clause_uhc = generate_select_clause(table_name, config['fields'], prefix="UHC_")
    
    # Generate the join clause for UHC CRN
    join_clause_uhc = f"""
    LEFT JOIN (
        SELECT * FROM {table_name}_filtered WHERE row_num = 1
    ) AS UHC_{table_name}
    ON main_table.uhc_crn = UHC_{table_name}.CRN
    """
    
    # Generate the select clause for IHC CRN (with IHC_ prefix)
    select_clause_ihc = generate_select_clause(table_name, config['fields'], prefix="IHC_")
    
    # Generate the join clause for IHC CRN
    join_clause_ihc = f"""
    LEFT JOIN (
        SELECT * FROM {table_name}_filtered WHERE row_num = 1
    ) AS IHC_{table_name}
    ON main_table.ihc_crn = IHC_{table_name}.CRN
    """
    
    # Add the WITH clause for main CRN to the list (same filtered data used for UHC and IHC)
    with_clauses.append(with_clause_main)
    
    # Add the join clauses to the list for main CRN, UHC CRN, and IHC CRN
    join_clauses.append(join_clause_main)
    join_clauses.append(join_clause_uhc)
    join_clauses.append(join_clause_ihc)
    
    # Add the selected fields from this table to the final SELECT clause for main, UHC, and IHC CRNs
    select_clauses.append(", ".join([f"{table_name}.{alias}" for alias in config['fields'].values()]))
    select_clauses.append(", ".join([f"UHC_{table_name}.{alias} AS UHC_{alias}" for alias in config['fields'].values()]))
    select_clauses.append(", ".join([f"IHC_{table_name}.{alias} AS IHC_{alias}" for alias in config['fields'].values()]))

# Combine the WITH, JOIN, and SELECT clauses into the final query
final_query = f"""
WITH
{", ".join(with_clauses)}
SELECT
{", ".join(select_clauses)}
FROM `project.dataset.main_table` AS main_table
{"".join(join_clauses)}
"""

# Execute the query
job = client.query(final_query)

# Wait for the job to complete
results = job.result()

# Optional: Store results in a new table
destination_table = "project.dataset.new_combined_table"
job_config = bigquery.QueryJobConfig(destination=destination_table, write_disposition="WRITE_TRUNCATE")
job = client.query(final_query, job_config=job_config)
job.result()  # Wait for the job to complete
print(f"Data successfully written to {destination_table}")
