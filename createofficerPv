def generate_full_dynamic_query(table_name, decrypt_field_mappings, main2_field_mappings, limit=None):
    # Base query structure
    query_template = """
    CREATE OR REPLACE TABLE `{table_name}` AS
    WITH maintable AS (
        SELECT * FROM `{table_name}`
    ),
    decryptData AS (
        SELECT
            m.purposingHeader.entityKey AS entitykey,
            m.purposingHeader AS purposingHeader,
            {decrypt_field_selection}
        FROM maintable m,
        UNNEST(m.officer_legacy.history) AS o
    ),
    main2 AS (
        SELECT
            d.entityKey AS entitykey,
            {main2_field_selection}
        FROM decryptData d
        GROUP BY 1
    )
    SELECT * EXCEPT(entityKey) FROM main2;
    """

    # Dynamically generate field selections for decryptData part
    decrypt_field_selection = ",\n            ".join([
        f"m.{key} AS {value}" if "decrypt" not in key else f"df-dna-kv-uk-uat-prd-9c5e.shared_uk_uat.decrypt(m.{key}) AS {value}"
        for key, value in decrypt_field_mappings.items()
    ])

    # Dynamically generate field selections for main2 part
    main2_field_selection = ",\n            ".join([
        f"ANY_VALUE(d.{key}) AS {value}" if "ANY_VALUE" not in key else f"{key} AS {value}"
        for key, value in main2_field_mappings.items()
    ])

    # If limit is provided, add it to the query
    if limit:
        limit_clause = f" LIMIT {limit}"
    else:
        limit_clause = ""

    # Format the query with dynamic values
    query = query_template.format(
        table_name=table_name,
        decrypt_field_selection=decrypt_field_selection,
        main2_field_selection=main2_field_selection
    )

    query += limit_clause
    return query


# Example usage
table_name = "dfa-dna-ws5030-uk-uat-prd-e697"

# Fields for decryptData part
decrypt_field_mappings = {
    "OFFICER_LEGACY": "OFFICER_LEGACY",
    "NONLIMITED_REGISTER": "NONLIMITED_REGISTER",
    "standardised.NEW_PERSON_NUMBER_PREFIX": "NEW_PERSON_NUMBER_PREFIX",
    "standardised.NEW_PERSON_NUMBER_SUFFIX": "NEW_PERSON_NUMBER_SUFFIX",
    "standardised.NEW_PERSON_NUMBER": "NEW_PERSON_NUMBER",
    "rawfields.PERSON_NEW_APPOINTMENT_TYPE": "PERSON_NEW_APPOINTMENT_TYPE",
    "rawfields.PERSON_RESIGNATION_DATE": "PERSON_RESIGNATION_DATE",
    "rawfields.PERSON_RECORD_TYPE": "PERSON_RECORD_TYPE",
    "rawfields.PERSON_UPDATE_DATE": "PERSON_UPDATE_DATE",
    "rawfields.PERSON_NEW_PERSON_NUMBER": "PERSON_NEW_PERSON_NUMBER",
    "rawfields.PERSON_DATE_OF_BIRTH": "PERSON_DATE_OF_BIRTH",
    "rawfields.PERSON_NEW_POSTCODE": "PERSON_NEW_POSTCODE",
    "rawfields.PERSON_DETAILS_STRING": "PERSON_DETAILS_STRING",
    "protectionInfo.keyId": "PERSON_DETAILS_STRING"  # For decrypt fields
}

# Fields for main2 part
main2_field_mappings = {
    "OFFICER_LEGACY": "OFFICER_LEGACY",
    "NONLIMITED_REGISTER": "NONLIMITED_REGISTER",
    "COMPANY_REGISTERED_NUMBER": "COMPANY_REGISTERED_NUMBER",
    "PERSON_PARTIAL_DATE_OF_BIRTH": "PERSON_PARTIAL_DATE_OF_BIRTH",
    "PERSON_NEW_APPOINTMENT_TYPE": "PERSON_NEW_APPOINTMENT_TYPE",
    "PERSON_UPDATE_DATE": "PERSON_UPDATE_DATE",
    "PERSON_RESIGNATION_DATE": "PERSON_RESIGNATION_DATE",
    "PERSON_RECORD_TYPE": "PERSON_RECORD_TYPE",
    "PERSON_NEW_PERSON_NUMBER_PREFIX": "PERSON_NEW_PERSON_NUMBER_PREFIX",
    "PERSON_NEW_PERSON_NUMBER_SUFFIX": "PERSON_NEW_PERSON_NUMBER_SUFFIX"
}

# Generate the query dynamically
query = generate_full_dynamic_query(table_name, decrypt_field_mappings, main2_field_mappings, limit=200000)

print(query)
